package com.ifeve.chapter01;/** * t1线程和主线程访问资源时都得用synchronized上锁才行 * 否则这里的主线程依然可以访问被上锁的资源(如果删掉主线程的synchronized的话) */public class DeadLockDemo2 {    /**     * A锁     */    private static final String LOCK = "LOCK";    /**     * 资源     */    private static String resource = "resource";    public static void main(String[] args) throws InterruptedException {        new DeadLockDemo2().deadLock();    }    private void deadLock() throws InterruptedException {        Thread t1 = new Thread(new Runnable() {            @Override            public void run() {                synchronized (LOCK) {                    try {                        System.out.println("t1 get LOCK");                        System.out.println("t1 thread print:" + resource);                        Thread.sleep(3000); // 占用资源3s                        System.out.println("t1 release LOCK");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }            }        });        t1.start();        Thread.sleep(1000); // 1s        synchronized (LOCK) {            System.out.println("main thread print:" + resource);        }    }}